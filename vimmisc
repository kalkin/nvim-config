" Information 
" {{{
" vim:foldmarker={{{,}}} tw=80 ft=vim
" Last Modified [ 2010-09-16 ]
" 
" This file contains all configurations which doesn't fit elsewhere
"
" }}}

" Use pathogen to easily modify the runtime path to include all
" plugins under the ~/.vim/bundle directory
" Syntax on!
syntax on

" Filetype plugin on!
filetype plugin on

set termguicolors
colorscheme NeoSolarized

let mapleader=" "

" Needed for loading own snippets and not the snipmate snippets
let g:snippets_dir="~/.vim/snippets"


" autocmd FileType go autocmd BufWritePre <buffer> Fmt

" save and reload the folds see also :help 'views-sessions
au BufWinLeave *.* mkview
au BufWinEnter *.* silent loadview

" source https://www.linux.com/learn/tutorials/442438-vim-tips-folding-fun
function! NeatFoldText() "{{{
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()
" }}}

let g:undotree_SplitWidth = 40
let g:undotree_SetFocusWhenToggle = 1

"call unite#filters#matcher_default#use(['matcher_fuzzy'])
"call unite#filters#sorter_default#use(['sorter_rank'])

let g:indentLine_char = 'â”†'

augroup HiglightTODO
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(WORKAROUND\|CHANGED\|XXX\|FIXME\|BUG:\|HACK\)')
augroup END

" Autoresize windows on terminal size changes
:autocmd VimResized * wincmd =

autocmd! BufWritePost * Neomake
